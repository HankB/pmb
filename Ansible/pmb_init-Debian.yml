---
# Install and provision an SSD on localhost (before first boot.)
# Starting point: https://github.com/HankB/polana-ansible/blob/main/provision-Debian-lite.yml
- name: Provision SD card before first boot
  hosts: localhost
  connection: local 

  vars_files:
    - pmb_init_vars.yml

  tasks:

# Build a list of mounted partitions and unmount if found
  - name: build list of mounted partitions
    shell: "df 2>/dev/null|grep {{device}}|awk '{print $1}'"
    register: "partitions"

  - name: list mounted partitions
    debug: var=partitions.stdout_lines

  - name: unmount partitions
    become: yes
    shell: "umount {{ item }}"
    with_items: "{{ partitions.stdout_lines }}"

# execute blkdiscard if the image name is provided
  - name: erase SSD (blkdiscard)
    become: yes
    shell: "blkdiscard -f {{device}}"
    when: os_image is defined
    ignore_errors: true

# copy OS image if provided
  - name: copy OS image
    become: yes
    shell: "xzcat {{os_image}} > {{device}}"
    when: os_image is defined

  - name: probe partitions
    become: yes
    shell: "partprobe {{ device }}"

# Extend the 2nd (root) partition.
  - name: Read device information (always use unit when probing) (doesn't work)
    become: yes
    community.general.parted: device="{{ device }}" unit=MiB
    register: ssd_info

  - name: show partition info
    debug: var=ssd_info.stdout_lines

  - name: Extend root partition (2nd)
    become: yes
    community.general.parted:
      device: "{{ device }}"
      number: 2
      part_end: "{{ size }}"
      resize: true
      state: present

  - name: Resize EXT4 filesystem
    become: yes
    shell: "e2fsck -p -f {{ device }}{{ part_prefix }}2 && resize2fs {{ device }}{{ part_prefix }}2"

# create extended partition

  - name: Determine start for Extended partion
    become: yes
    tags: extended_part
    shell: |
      echo $(( $(echo "unit s  print"|parted {{ device }}|awk '/^ 2/ {print $3}'|sed s/s//)+1 ))
    register: ext_part_start

  - name: show ext_part_start info
    tags: extended_part
    debug: var=ext_part_start.stdout_lines


  - name: Create extended partition for additional installs
    become: yes
    tags: extended_part
    parted:
      device: "{{ device }}"
      number: 3
      part_start: "{{ ext_part_start.stdout_lines[0] }}s"
      part_end: -1s
      part_type: "extended"
      state: present

  - name: Create logical partition in the root partition
    become: yes
    tags: extended_part
    parted:
      device: "{{ device }}"
      number: 5
      part_start: "-512s"
      part_end: -1s
      part_type: "logical"
      state: present

# mount root partition

  - name: create root partition mount point
    become: yes
    tags: hostname
    file:
      path: /mnt/RASPIROOT 
      state: directory

  - name: mount new root partition
    tags: hostname
    become: yes
    command: "mount {{device}}{{ part_prefix }}2 /mnt/RASPIROOT"

# change host name

  - name: change hostname in /etc/hosts
    become: yes
    tags: hostname
    ansible.builtin.lineinfile:
      path: /mnt/RASPIROOT/etc/hosts
      line: 127.0.1.1 {{host_name}}
      owner: root
      group: root
      mode: '0644'

  - name: change hostname in /etc/hostname
    become: yes
    tags: hostname
    shell: "echo  {{host_name}} >/mnt/RASPIROOT/etc/hostname"

# Spoof WiFi and Ethernet MAC

  - name: spoof Ethernet MAC addresses
    copy:
      dest: /mnt/RASPIROOT/etc/systemd/network/00-ethernet.link
      content: |
        [Match]
        Driver=macb bcmgenet r8152
        [Link]
        MACAddress={{eth_mac}}

  - name: spoof WiFi MAC addresses
    copy:
      dest: /mnt/RASPIROOT/etc/systemd/network/00-wifi.link
      content: |
        [Match]
        Driver=rtl8xxxu brcmfmac

        [Link]
        MACAddress={{wifi_mac}}

# umount root partition

  - name: unmount root partition
    tags: hostname
    become: yes
    command: "umount /mnt/RASPIROOT"

# copy SSH credentials for root login

  - name: create boot partition mount point
    become: yes
    file:
      path: /mnt/RASPIFIRM
      state: directory

  - name: mount new boot partition
    become: yes
    command: "mount {{device}}{{ part_prefix }}1 /mnt/RASPIFIRM"

  - name: stat ~/.ssh/id_rsa.pub
    become: no
    stat:
      path: ~/.ssh/id_rsa.pub
    register: id_rsa_pub
   
  - name: create variable with SSH credentials
    become: no
    shell: "echo  root_authorized_key=$(cat ~/.ssh/id_rsa.pub)"
    register: ssh_creds
    when: id_rsa_pub.stat.exists

  - name: report ssh_creds
    debug: 
      msg: ssh_creds.stdout
    when: id_rsa_pub.stat.exists

  - name: copy SSH credentials
    shell: "echo {{ssh_creds.stdout}} >>/mnt/RASPIFIRM/sysconf.txt"
    when: id_rsa_pub.stat.exists
        
  - name: unmount boot partition
    become: yes
    command: "umount /mnt/RASPIFIRM"
