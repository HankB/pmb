#!/usr/bin/env bash
# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset
############### end of Boilerplate

# script to add a Pi installation for multiboot using "pmb"
# Requires env vars
# * size - indicate the size of the resulting EXT4 partition
#          see the man page for sfdisk for units (e.g. size=10G)
# * device which holds a fresh unbooted RpiOS (or other) install
#   (e.g. device=/dev/sdb or device=/dev/mmcblk0)
# * path to compressed Debian image file

usage() {
    echo "device=/dev/sdb size=10G image=/path/to/compressed/image label=rpios $0 [settings_file] (for example)"
    echo "    -or-"
    echo "$0 [settings_file]"
    exit 1
}

# pull in gerneral purpose helpers
source "$(dirname "$0")/pmb-helpers"

# Check for first arg - settings file
if [[ -v 1 ]]
then
    if [ -e "$1" ]
    then
        echo sourcing "$1"
        # shellcheck disable=SC1090 # ShellCheck can't follow non-const...
        source "$1"
    else
        echo "$1 not found"
        usage
    fi
fi

# verify that required ENV vars are provided
if [[ ! -v device ]] || [[ ! -v size ]] || [[ ! -v image ]] || [[ ! -v label ]]
then
    usage
fi

# Check for partition5 (Minimum partition when prepared, first Logical)

echo "============================================= find device (part5)"

if [ -e "${device}5" ]
then
    part5=${device}5
    partbase=${device}
elif [ -e "${device}p5" ]
then
    part5="${device}p5"
    partbase=${device}p
else
    echo "Can't find partition 5 on $device"
    echo "be sure to install and run 'pmb-init' before this script."
    usage
fi

echo "============================================= part5: $part5"

## Now loop to find the highest numbered partition.

for index in {5..20}
do    
  echo "$index"
  if [ ! -e "${partbase}$index" ]
  then
    break
  fi
done

newpart="$((index - 1))"
echo "next available partition is $index and new partition is $newpart"
echo "============================================= partitions to use: $index and $newpart"

## Create the new partition

sfdisk --delete "${device}" "${newpart}"
echo -e "type=L, size=${size}" | sfdisk -N "${newpart}" "${device}"

mkfs.ext4 -L "$label" "${partbase}${newpart}"

echo "============================================= recreate the filler"

echo -e 'type=L' | sfdisk -N "${index}" "${device}"

echo "============================================= decompress OS image"


# extract imstallation image

image_file=/tmp/$(basename -s .xz  "${image}")
unxz -k --stdout "${image}" >"$image_file"

# Create mount points
# Random dir name from
# https://stackoverflow.com/questions/2793812/generate-a-random-filename-in-unix-shell

boot_mnt=/tmp/$(date +%S%N)
mkdir "$boot_mnt"
root_mnt=/tmp/$(date +%S%N)
mkdir "$root_mnt"
target_mnt=/tmp/$(date +%S%N)
mkdir "$target_mnt"

# Configure and mount loop devices for the image to be installed

img_loop_dev=$(losetup --find --partscan --show "$image_file")
mount "${img_loop_dev}p1" "$boot_mnt"
mount "${img_loop_dev}p2" "$root_mnt"

# Mount the partition to "install" to.

mount "${partbase}${newpart}" "$target_mnt" 

# copy root files

rsync -a "$root_mnt"/ "$target_mnt"

# mount pmb-system 
pmb_system_mnt=/tmp/$(date +%S%N)
mkdir "$pmb_system_mnt"
mount "${part5}" "$pmb_system_mnt"
## Add line to OS tracking file.
# Regex for PARTUUID provided by:
# https://stackoverflow.com/questions/13565658/right-tool-to-filter-the-uuid-from-the-output-of-blkid-program-using-grep-cut
partuuid=$(blkid|grep "${partbase}${newpart}"|grep -oP 'PARTUUID=[0-9a-zA-Z"-]+'|sed 's/.*=//')
echo "PARTUUID=$partuuid" > "$pmb_system_mnt/OS_list/$label"
echo "root_dev=${partbase}${newpart}"    >> "$pmb_system_mnt/OS_list/$label"
# helper added if specified and found
# shellcheck disable=SC2034 # (warning): bootuuid appears unused
bootuuid=$(blkid|grep "${partbase}1"|grep -oP 'PARTUUID=[0-9a-zA-Z"-]+'|sed 's/.*=//')


## source helper if provided in config/ENV and found
if [[ -v helper ]]
then
    if [ -e "$helper" ]
    then
        # shellcheck disable=SC1090 # ShellCheck can't follow non-const...
        source "$helper"
        echo "helper=$helper" >> "$pmb_system_mnt/OS_list/$label"
    else
        echo "helper script \"$helper\" not found"
    fi
fi

# run helper to spoof MAC address
spoof_mac

# archive boot files
mkdir "$target_mnt"/root/boot_part/
tar cf "$target_mnt"/root/boot_part/backup.tar "$boot_mnt"

### cleanup
umount "$boot_mnt" "$root_mnt" "$target_mnt" "$pmb_system_mnt"
losetup -d "$img_loop_dev"
rm -r "$boot_mnt" "$root_mnt" "$target_mnt" "${image_file}" "$pmb_system_mnt"

echo "$image successfully installed to ${partbase}${newpart}"
