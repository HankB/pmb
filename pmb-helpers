#!/usr/bin/env bash

# Generic helper functions intended to be shared among the various
# 'pmb_<do-something>' scripts.

## spoof_mac() will write Systemd .link files to '/etc/systemd/network'
# requires that the root filesystem be mounted and the mount point
# in $$target_mnt. It will use (if provided.)

# $Ethernet_MAC, $Ethernet_match
# $Wifi_MAC, $Wifi_match

spoof_mac() {
    ### Ethernet
    if [[ -v Ethernet_MAC ]]
    then
        if  [[ ! -v Ethernet_match ]]
        then
            Ethernet_match="Driver=macb bcmgenet r8152"
        fi
        cat <<EOF >"${target_mnt}/etc/systemd/network/00-Ethernet.link"
[Match]
$Ethernet_match

[Link]
MACAddress=$Ethernet_MAC
EOF
    fi

    ### WiFi
    if [[ -v Wifi_MAC ]]
    then
        if  [[ ! -v Wifi_match ]]
        then
            Wifi_match="Driver=rtl8xxxu brcmfmac"
        fi
        cat <<EOF >"${target_mnt}/etc/systemd/network/00-Wifi.link"
[Match]
$Wifi_match

[Link]
MACAddress=$Wifi_MAC
EOF
    fi

}


## fixup_OS_info() will refresh the entries for the OS indicated by $label
# in the files stored in "$pmb_system_mnt/OS_list/$label" to handle changes
# in "/dev/sdX" or "/dev/nvme*" or "/dev/mmc*" device name changes as well
# as changes in the PARTUUID name.
#
# The source of truth for identifying devices is therefore the $label
#
# This function expects the file to be found at
# "$pmb_system_mnt/OS_list/$label"
#
# example "lsblk --raw --noheadings --output NAME,PARTUUID,LABEL" output is
# sda6 a3f161f3-06 Debian12
#
# Inputs
#  $pmb_system_mnt - The mount point for the info partition
#  $label - filesystem label for the target filesystem
#
# Outputs
#  $PARTUUID - UUID for the partition holding the target OS
#  $label

fixup_OS_info() {
    # Can the info for this OS label be read?
    if [ -e "$pmb_system_mnt/OS_list/$label" ]
    then
        source "$pmb_system_mnt/OS_list/$label"
    else
        echo "$pmb_system_mnt/OS_list/$label cannot be found/read"
        exit 1
    fi

    # Does a filesystem with the label exist?
    device_info=$(lsblk -r -n -o NAME,PARTUUID,LABEL | grep "$label")
    echo "lsblk: $device_info"
    if [ -z "$device_info" ]
    then
        echo "partition labeled $label not found"
        exit 1
    fi

    # Check for correct device, substitute if wrong
    blkid_device=$(echo "$device_info" | awk '{print "/dev/"$1}')
    if [ "$blkid_device" != "$root_dev" ]
    then
        echo "device in  $pmb_system_mnt/OS_list/$label does not match blkid result"
        echo "$blkid_device vs $root_dev"
        sed -i -e "s#root_dev=.*#root_dev=$blkid_device#" "$pmb_system_mnt/OS_list/$label"
    fi

    # Check for correct PARTUUID, substitute if wrong
    blkid_PARTUUID=$(echo "$device_info" | awk '{print $2}')
    if [ "$blkid_PARTUUID" != "$PARTUUID" ]
    then
        echo "PARTUUID in  $pmb_system_mnt/OS_list/$label does not match blkid result"
        echo "$blkid_PARTUUID vs $PARTUUID"
        sed -i -e "s#PARTUUID=.*#PARTUUID=$blkid_PARTUUID#" "$pmb_system_mnt/OS_list/$label"
        PARTUUID="$blkid_PARTUUID"
    fi
}

## Make sure that cmdline.txt in the boot partition is correct for
# the target root partition. Also make sure that this is correct in
# the target root /etc/fstab
#
# Expectations:
# boot partition mounted at "$from_boot" 
#   (so cmdline.txt is at "$target_mnt"/from_boot.txt)
# 
# root partition is mounted at "$target_mnt"

# "$PARTUUID" is set to the desired target partition
fixup_partuuid() {
    sed -i -e "s#PARTUUID=.*#PARTUUID=$PARTUUID#" "$from_boot"/cmdline.txt

}
