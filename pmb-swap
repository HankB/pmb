#!/usr/bin/env bash
# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset
############### end of Boilerplate

## Code to swap between from one OS installation on storage media to another.
# Requires env var
# * label - Used to identify the next OS partition and related information 
#   stored in the pmb-system labeled partition.

usage() {
    echo "$0 <os_label> <device>"
    echo "Label of EXT4 filesystem where target OS has been installed."
    echo "device which contains the 'pmb-system' filesystem"
    exit 1
}

# pull in helpers
source "$(dirname "$0")/pmb-helpers"

# Check for first arg - label
if [[ -v 1 ]]
then
    root_label=$(findmnt -n -o SOURCE /)
    label="$1"
    if [ "$root_label" == "$label" ]
    then
        echo "$root_label is already in use"
        usage
    fi

    # find info partition
    if [[ -v 2 ]]
    then
        device="$2"
        if [ -e "${device}5" ]
        then
            part5="${device}5"
            part2="${device}2"
        elif [ -e "${device}p5" ]
        then
            part5="${device}p5"
            part2="${device}p2"
        else
            echo "Can't find partition 5 on $device"
            usage
        fi
    else
        usage
    fi
else
    usage
fi

# mount pmb-system unless already mounted (e.g. by RpiOS)
if lsblk -r -n -o NAME,PARTUUID,LABEL | grep pmb-system >/dev/null
then
    pmb_system_mnt=$(lsblk -r -n -o LABEL,MOUNTPOINT| awk /pmb-system/'{print $2}')
    umount_list=""
else
    pmb_system_mnt=/tmp/$(date +%S%N)
    mkdir "$pmb_system_mnt"
    mount "${part5}" "$pmb_system_mnt"
    umount_list="$pmb_system_mnt"
fi

# fixup (or bail if $label does not represent an available OS)
fixup_OS_info

## Mount the "next" OS partition unless already mounted
if lsblk -r -n -o NAME,PARTUUID,LABEL | grep "$PARTUUID" >/dev/null
then
    target_mnt=$(lsblk -r -n -o LABEL,PARTUUID,MOUNTPOINT| awk /"$PARTUUID"/'{print $3}')
else
    target_mnt=/tmp/$(date +%S%N)
    mkdir "$target_mnt"
    mount PARTUUID="$PARTUUID" "$target_mnt"
    umount_list="$umount_list $target_mnt"
fi

## Determine the boot partition we're swapping from
# Might be the one we're running from
# Might be on another device that we're swapping between
current_boot=$(df /boot/firmware|awk /firmware/'{print $1}')
if [[ $current_boot =~ $device ]] # boot partition match the device?
then
    echo we are on the target device
    from_boot="/boot/firmware"
    from_root="/"
else
    echo not on target
    # need to ID and mount a"from_boot" and "from_root"
    from_boot=/tmp/$(date +%S%N)
    mkdir "$from_boot"
    mount "${part2}" "$from_boot"
    from_partuuid=$(grep -oP 'PARTUUID=[0-9a-zA-Z"-]+' "$from_boot"/cmdline.txt|sed 's/.*=//')
    from_root=/tmp/$(date +%S%N)
    mkdir "$from_root"
    mount PARTUUID="$from_partuuid" "$from_root"
    umount_list="$umount_list $from_boot $from_root"
fi

## Check for boot image in the target
if [ ! -e "$target_mnt"/root/boot_part/backup.tar ]
then
    echo "boot backup .../root/boot_part/backup.tar for $label not found"
    umount "$umount_list"
    rm -r "$umount_list"
    exit 1
fi

## Backup current boot partition
mkdir -p "$from_root"/root/boot_part/
if ! tar cf "$from_root"/root/boot_part/backup.tar "$from_boot"
then
    echo "cannot backup /boot/firmware to /root/boot_part/backup.tar"
    umount "$umount_list"
    rm -r "$umount_list"
    exit 1
fi

## No turning back after this (except to restore the previous boot part)

## Clear the boot part and install target boot partition components
rm -rf "$from_boot"/boot/firmware/*
tar --strip-components=2 --directory="$from_boot"/boot/firmware \
    -xf "$target_mnt"/root/boot_part/backup.tar

## Execute the helper when provided to complete prep for the next OS.
if [[ -v helper ]]
then
    if [ -e "$helper" ]
    then
        # shellcheck disable=SC1090 # ShellCheck can't follow non-const...
        source "$helper"
    else
        echo "helper script \"$helper\" not found"
    fi
fi

## umount info and target partitions
    umount "$umount_list"
    rm -r "$umount_list"
