#!/usr/bin/env bash
# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset
############### end of Boilerplate

# script to init a Pi installation for multiboot using "pmb"
# Requires env vars
# * size   - indicate the size of the resulting EXT4 partition
#          see the man page for sfdisk for units (e.g. size=10G)
# * device - which holds a fresh unbooted RpiOS (or other) install
#   (e.g. device=/dev/sdb or device=/dev/mmcblk0)

usage() {
    echo "device=/dev/sdb size=10G label=rpios $0 [settings_file] (for example)"
    echo "    -or-"
    echo "$0 [settings_file]"
    exit 1
}

# pull in helpers
source $(dirname $0)/pmb-helpers

# Check for first arg - settings file
if [[ -v 1 ]]
then
    if [ -e "$1" ]
    then
        echo sourcing "$1"
        # shellcheck disable=SC1090 # ShellCheck can't follow non-const...
        source "$1"
    else
        echo "$1 not found"
        usage
    fi
fi

# verify that needed CMD line args are provided
if [[ ! -v device ]] || [[ ! -v size ]] || [[ ! -v label ]]
then
    usage
fi

# Check for partition2 (EXT4 partition)
if [ -e "${device}2" ]
then
    # shellcheck disable=SC2034 # unused here, provided for helper script
    part1=${device}1
    part2=${device}2
    part5=${device}5
elif [ -e "${device}p2" ]
then
    # shellcheck disable=SC2034 # unused here, provided for helper script
    part1="${device}p1"
    part2="${device}p2"
    part5="${device}p5"
else
    echo "Can't find partition 2 on $device"
    usage
fi

# make sure $part2 is not mounted
umount "$part2" >/dev/null 2>&1 || true

## Resize root (EXT4) partition 
echo  "size=${size}" | sfdisk -N 2 "${device}"
e2label "$part2" "$label"
resize2fs "$part2"

## Use rest of storage device for an Extended partition
s=$(($(sfdisk --list "${device}" |grep "${part2}"|awk '{print $3}')+1))
echo  "start=$s type=Ex" | sfdisk -N 3 "${device}"

# TODO add command to add a small EXT4 logical partition 
echo -e "type=L, size=4GiB" | sfdisk -N 5 "${device}"
mkfs.ext4 -L pmb-system -F -F "${part5}"

## Use rest of Extended partition for an empty logical (?) partition
echo  "type=L" | sfdisk -N 6 "${device}"

# mount pmb-system and root (target) filesystem before calling a helper
pmb_system_mnt=/tmp/$(date +%S%N)
mkdir "$pmb_system_mnt"
mount "${part5}" "$pmb_system_mnt"
target_mnt=/tmp/$(date +%S%N)
mkdir "$target_mnt"
mount "${part2}" "$target_mnt"
boot_mnt=/tmp/$(date +%S%N)
mkdir "$boot_mnt"
mount "$part1" "$boot_mnt"

mkdir "$pmb_system_mnt"/OS_list
## Add vars to OS tracking file.
# Regex for PARTUUID provided by:
# https://stackoverflow.com/questions/13565658/right-tool-to-filter-the-uuid-from-the-output-of-blkid-program-using-grep-cut
partuuid=$(blkid|grep "${part2}"|grep -oP 'PARTUUID=[0-9a-zA-Z"-]+'|sed 's/.*=//')
echo "PARTUUID=$partuuid" > "$pmb_system_mnt/OS_list/$label"
echo "root_dev=$part2"    >> "$pmb_system_mnt/OS_list/$label"
# helper added if specified and found

bootuuid=$(blkid|grep "${part1}"|grep -oP 'PARTUUID=[0-9a-zA-Z"-]+'|sed 's/.*=//')

## source helper if provided in config/ENV and found
if [[ -v helper ]]
then
    if [ -e "$helper" ]
    then
        # shellcheck disable=SC1090 # ShellCheck can't follow non-const...
        source "$helper"
        echo "helper=$helper" >> "$pmb_system_mnt/OS_list/$label"
    else
        echo "helper script \"$helper\" not found"
    fi
fi

# run helper to spoof MAC address
spoof_mac

umount "$pmb_system_mnt" "$target_mnt" "$boot_mnt"
rm -r "$pmb_system_mnt" "$target_mnt" "$boot_mnt"